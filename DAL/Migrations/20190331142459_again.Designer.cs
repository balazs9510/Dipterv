// <auto-generated />
using System;
using DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    [Migration("20190331142459_again")]
    partial class again
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<Guid>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("8ad60121-eb20-4fc1-83e3-450050b8a83d"), Description = "Shazam bemutató", EventId = new Guid("ecefdaf5-957d-433d-965b-21909f6ccd10"), From = new DateTime(2019, 3, 31, 16, 24, 58, 819, DateTimeKind.Local), ServiceId = new Guid("f266bf2d-ccf8-4492-8f63-7464dcbbbc5d"), ServicePlaceId = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b"), To = new DateTime(2019, 3, 31, 18, 24, 58, 848, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<byte[]>("EventImage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("ecefdaf5-957d-433d-965b-21909f6ccd10"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("b3ade006-caf6-458f-b04a-769eb8275c37"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("f266bf2d-ccf8-4492-8f63-7464dcbbbc5d"), City = "Budapest", Description = "Allee Cinema City mozi", Name = "Allee CC", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("83727b9b-277a-4cae-a4c4-ea4dc42aa694") },
                        new { Id = new Guid("0f9a0bcb-4f55-444b-9b1e-a47598c818b4"), City = "Pécs", Description = "Pécs Cinema City mozi", Name = "Pécs Plaza CC", Street = "Megyeri út 76.", TypeId = new Guid("83727b9b-277a-4cae-a4c4-ea4dc42aa694") },
                        new { Id = new Guid("d917cb95-e6cb-453b-bcaa-6a0b4da0c829"), City = "Budapest", Name = "Madách Színház", Street = "Erzsébet krt. 29-33.", TypeId = new Guid("ebec169a-b5fe-445d-9e35-d5583c8afe2a") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvent");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b"), Name = "Anyád", ServiceId = new Guid("f266bf2d-ccf8-4492-8f63-7464dcbbbc5d") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("1be8dd7c-8777-4aa2-8b02-cde1e9b75885"), Name = "I1", ServicePlaceId = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b") },
                        new { Id = new Guid("e2f78159-df61-4b0b-a02f-acca3d6815be"), Name = "I2", ServicePlaceId = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b") },
                        new { Id = new Guid("7b0caa09-8063-4839-ae17-d4f5d2068f49"), Name = "I3", ServicePlaceId = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b") },
                        new { Id = new Guid("bf13a42c-89c4-4d97-9c11-929277d19342"), Name = "I4", ServicePlaceId = new Guid("9636bf29-fff0-4807-96de-6c749d26b05b") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("83727b9b-277a-4cae-a4c4-ea4dc42aa694"), Name = "Mozi" },
                        new { Id = new Guid("ebec169a-b5fe-445d-9e35-d5583c8afe2a"), Name = "Színház" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "8bc24b4f-6455-4d0d-bc2c-697c18dbc550", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAEPG2ahIlDhzsh/601JetD1/PxyGYH8ApotNH/fx8pc+PEqnaIrQI65jKI8IsqtXo3A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", ConcurrencyStamp = "3bdeec53-2ed2-45a3-bd4a-a24b52ba9506", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany()
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
