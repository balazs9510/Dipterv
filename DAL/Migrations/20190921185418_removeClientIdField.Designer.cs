// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    [Migration("20190921185418_removeClientIdField")]
    partial class removeClientIdField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<string>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("a3625495-420a-41e3-861e-f394eae9f384"), Description = "", EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), From = new DateTime(2019, 9, 21, 20, 54, 17, 274, DateTimeKind.Local), ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e"), ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293"), To = new DateTime(2019, 9, 21, 22, 54, 17, 275, DateTimeKind.Local) },
                        new { Id = new Guid("0868c0c3-7be5-4b9b-b6e5-79a0ed81384d"), Description = "", EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), From = new DateTime(2019, 9, 21, 22, 54, 17, 275, DateTimeKind.Local), ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e"), ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293"), To = new DateTime(2019, 9, 22, 0, 54, 17, 275, DateTimeKind.Local) },
                        new { Id = new Guid("bd9fad4f-4206-4036-9bd1-80c08dd1ba58"), Description = "", EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), From = new DateTime(2019, 9, 21, 20, 54, 17, 274, DateTimeKind.Local), ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e"), ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0"), To = new DateTime(2019, 9, 21, 22, 54, 17, 275, DateTimeKind.Local) },
                        new { Id = new Guid("d33d2d1d-89d8-443e-800a-57505707ea0d"), Description = "", EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), From = new DateTime(2019, 9, 21, 22, 54, 17, 275, DateTimeKind.Local), ServiceId = new Guid("5109d33a-5bce-4d51-a920-2612c773d0ed"), ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0"), To = new DateTime(2019, 9, 22, 0, 54, 17, 275, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), Description = "Thanos súlyos tette, amivel elpusztította az univerzum élőlényeinek felét és megtörte a Bosszúállókat, a megmaradt hősöket egy végső összecsapásra készteti a Marvel Studios huszonegy filmet megkoronázó, nagyszabású fináléjában, a Bosszúállók: Végjátékban.", ImageId = new Guid("93fd0c33-3f74-4dc3-a3e7-e12fbb199ee6"), Name = "Bosszúállók: Végjáték", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("b0dedf96-e69c-46bc-ae44-7c136ad4adf6"), Description = "Mindannyiunkban ott bujkál a szuperhős – de van, akiből elő is jön. Billy Batson 14 éves, egy árvaházból kerül nevelőszüleihez, és nem a legnépszerűbb srác az iskolában…de Shazam, az ősöreg, különleges erejű varázsló mégis kiválasztja. Amikor a srác hangosan kimondja: a varázsló nevét, átalakul. Igazi szuperhős válik belőle, annak minden kellékével: testhezálló, köpönyeggel kiegészített ruha, különleges eszközök, rendkívüli erő és meghökkentő képességek.", ImageId = new Guid("1808cb52-1035-4666-97e4-314fb61b667d"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("c7d23a7e-1e39-468f-b289-2c9072c82da8"), Description = "Avagy a játéknak soha nincs vége", ImageId = new Guid("7917cd6e-5148-44c9-9842-74fe097af7fd"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("235dc3e9-7783-46db-9439-0c2893236b46"), Description = "FÖRCH MAGYAR KUPA", ImageId = new Guid("d956e6d5-af00-455f-b648-994a7ee4d824"), Name = "FTC-Telekom : DVTK", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("25dc3518-e7e1-4acb-9101-97188771782d"), Description = "Egy óra.", ImageId = new Guid("6b60bad5-faf1-4d86-9afb-692e786dc295"), Name = "Pihentető masszás (1 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("0d765255-7c31-4395-8218-a4f32c41c3d3"), Description = "Másfél óra.", ImageId = new Guid("6b60bad5-faf1-4d86-9afb-692e786dc295"), Name = "Pihentető masszás (1,5 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("d30959e7-ccf0-45dc-ab60-a5c36b42bc34"), Description = "Két óra.", ImageId = new Guid("6b60bad5-faf1-4d86-9afb-692e786dc295"), Name = "Pihentető masszás (2 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("Extension");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = new Guid("f167931f-adec-4ff5-bc6e-e6cfd33d2092"), Extension = "png", Name = "cinema.png" },
                        new { Id = new Guid("f1b6dc09-1dfd-4070-a476-6488099eaa77"), Extension = "png", Name = "theater.png" },
                        new { Id = new Guid("bafe0567-48d4-4c78-b588-9a0ec69cc4ba"), Extension = "png", Name = "sport.png" },
                        new { Id = new Guid("efad6f97-5a70-42b4-9af2-998e0ad1e5ce"), Extension = "png", Name = "spa.png" },
                        new { Id = new Guid("7637a166-c565-4a06-bce2-6391eb2137e2"), Extension = "png", Name = "alle.png" },
                        new { Id = new Guid("34b6aaae-1852-4273-8ea9-3d3e3ea33703"), Extension = "png", Name = "mom.png" },
                        new { Id = new Guid("91483404-87a3-4830-b083-b44d9bdcf5bc"), Extension = "png", Name = "groupama.png" },
                        new { Id = new Guid("84526581-a935-421f-9865-1e5d31cb3d1f"), Extension = "png", Name = "madach.png" },
                        new { Id = new Guid("8117bcb5-126b-4a8a-a313-348683d004cc"), Extension = "png", Name = "corvin_duma.png" },
                        new { Id = new Guid("274663ee-bdcb-48bc-9db8-a6ad2a7d4c55"), Extension = "png", Name = "aquapark.png" },
                        new { Id = new Guid("93fd0c33-3f74-4dc3-a3e7-e12fbb199ee6"), Extension = "png", Name = "endgame.png" },
                        new { Id = new Guid("1808cb52-1035-4666-97e4-314fb61b667d"), Extension = "png", Name = "shazam.png" },
                        new { Id = new Guid("7917cd6e-5148-44c9-9842-74fe097af7fd"), Extension = "png", Name = "negyszogletu.png" },
                        new { Id = new Guid("d956e6d5-af00-455f-b648-994a7ee4d824"), Extension = "png", Name = "ftc.png" },
                        new { Id = new Guid("6b60bad5-faf1-4d86-9afb-692e786dc295"), Extension = "png", Name = "masszazs.png" },
                        new { Id = new Guid("a3bddae0-0492-446a-b65e-2276dac45033"), Extension = "svg", Name = "t4.svg" },
                        new { Id = new Guid("27085f99-ff6b-4cdd-b3af-c3b28d0a6894"), Extension = "svg", Name = "t10.svg" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e"), City = "Budapest", Description = "A 13 termes Cinema City Allee 2009. óta várja vendégeit a legjobb premier filmekkel - egyik termében kizárólag eredeti nyelvű filmvetítésekkel - az év minden napján. Nyitvatartás: pénztárnyitás az első előadás előtt 30 perccel, pénztár zárás az utolsó előadás kezdete után 15 perccel.", ImageId = new Guid("7637a166-c565-4a06-bce2-6391eb2137e2"), Name = "CinemaCity Alle", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("840a697d-2411-4072-848c-f6d64075cd79") },
                        new { Id = new Guid("5109d33a-5bce-4d51-a920-2612c773d0ed"), City = "Budapest", Description = "A CINEMApink MOM Park a jelenleg elérhető legjobb képminőséggel, prémium hangrendszerrel, kényelmi extrákkal és a legújabb sikerfilmekkel várja!", ImageId = new Guid("34b6aaae-1852-4273-8ea9-3d3e3ea33703"), Name = "CINEMApink MOM Park", Street = "Alkotás u. 53", TypeId = new Guid("840a697d-2411-4072-848c-f6d64075cd79") },
                        new { Id = new Guid("7415e445-013b-4f54-a228-63165a8f969b"), City = "Budapest", Description = "„BEST OF BUDAPEST & HUNGARY 2017” DÍJAT NYERT A FRADI OTTHONA, A GROUPAMA ARÉNA!", ImageId = new Guid("91483404-87a3-4830-b083-b44d9bdcf5bc"), Name = "Groupama Aréna", Street = "Üllői út 129", TypeId = new Guid("4fa6edec-e7d3-4c88-b990-0efd99c713b4") },
                        new { Id = new Guid("307a5d83-40ae-4df9-8c25-6433fb571a60"), City = "Budapest", Description = "Madách Színház néven több színházi vállalkozás is létrejött századunkban Budapesten. 1919-ben a Zeneakadémia kistermében Madách Színház néven kísérletezett egy társulat, mely zömmel a frontról hazatért, szerződés nélküli színészekből alakult. Alig több mint egy évig működtek, új típusú programmal indultak, legnagyobb sikerük a százas szériát futó Holnap reggel című Karinthy Frigyes dráma előadása.", ImageId = new Guid("84526581-a935-421f-9865-1e5d31cb3d1f"), Name = "Madách Színház", Street = "Erzsébet krt. 29-33", TypeId = new Guid("01dd128f-40ab-4dc0-a544-55e97b327591") },
                        new { Id = new Guid("40f379a7-033e-4886-80d9-f94d342cfaa1"), City = "Budapest", Description = "Corvin Dumaszínház", ImageId = new Guid("8117bcb5-126b-4a8a-a313-348683d004cc"), Name = "Corvin Dumaszínház", Street = "Corvin sétány 1 1/b", TypeId = new Guid("01dd128f-40ab-4dc0-a544-55e97b327591") },
                        new { Id = new Guid("221eb09e-00c5-4ebb-8a1e-75ede4c05950"), City = "Budapest", Description = "Ha többre vágysz egy átlagos pihenésnél... nálunk egyszerre átélheted akár egy kényeztető wellness hétvége minden jótékony hatását vagy gyermekként élvezheted az Aquaworld élményekkel teli világát.", ImageId = new Guid("274663ee-bdcb-48bc-9db8-a6ad2a7d4c55"), Name = "Aquaworld Resort Budapest", Street = "Íves út 16", TypeId = new Guid("5c0bc8c5-4e05-483c-97ac-f810d400b191") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvents");

                    b.HasData(
                        new { EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e") },
                        new { EventId = new Guid("d02b9ebe-6b69-4501-b54e-cc7da9179d3e"), ServiceId = new Guid("5109d33a-5bce-4d51-a920-2612c773d0ed") },
                        new { EventId = new Guid("b0dedf96-e69c-46bc-ae44-7c136ad4adf6"), ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e") },
                        new { EventId = new Guid("b0dedf96-e69c-46bc-ae44-7c136ad4adf6"), ServiceId = new Guid("5109d33a-5bce-4d51-a920-2612c773d0ed") },
                        new { EventId = new Guid("c7d23a7e-1e39-468f-b289-2c9072c82da8"), ServiceId = new Guid("307a5d83-40ae-4df9-8c25-6433fb571a60") },
                        new { EventId = new Guid("235dc3e9-7783-46db-9439-0c2893236b46"), ServiceId = new Guid("7415e445-013b-4f54-a228-63165a8f969b") },
                        new { EventId = new Guid("25dc3518-e7e1-4acb-9101-97188771782d"), ServiceId = new Guid("221eb09e-00c5-4ebb-8a1e-75ede4c05950") },
                        new { EventId = new Guid("0d765255-7c31-4395-8218-a4f32c41c3d3"), ServiceId = new Guid("221eb09e-00c5-4ebb-8a1e-75ede4c05950") },
                        new { EventId = new Guid("d30959e7-ccf0-45dc-ab60-a5c36b42bc34"), ServiceId = new Guid("221eb09e-00c5-4ebb-8a1e-75ede4c05950") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LayoutImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LayoutImageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0"), LayoutImageId = new Guid("a3bddae0-0492-446a-b65e-2276dac45033"), Name = "4 helyes terem(mom)", ServiceId = new Guid("5109d33a-5bce-4d51-a920-2612c773d0ed") },
                        new { Id = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293"), LayoutImageId = new Guid("a3bddae0-0492-446a-b65e-2276dac45033"), Name = "4 helyes terem(allee)", ServiceId = new Guid("5ab7a6d4-5e05-480c-a473-fbca8b6c511e") },
                        new { Id = new Guid("2553c85d-b95e-49b9-ac0f-a59e47c15d8d"), LayoutImageId = new Guid("a3bddae0-0492-446a-b65e-2276dac45033"), Name = "4 helyes terem (madách)", ServiceId = new Guid("307a5d83-40ae-4df9-8c25-6433fb571a60") },
                        new { Id = new Guid("d0cf801c-ef14-44f8-809b-1741a9b755c0"), LayoutImageId = new Guid("a3bddae0-0492-446a-b65e-2276dac45033"), Name = "4 helyes terem (aquaworld)", ServiceId = new Guid("221eb09e-00c5-4ebb-8a1e-75ede4c05950") },
                        new { Id = new Guid("1f9afb63-2c3a-4fb7-b0e2-6bc3fd794151"), LayoutImageId = new Guid("27085f99-ff6b-4cdd-b3af-c3b28d0a6894"), Name = "10 helyes terem (groupama)", ServiceId = new Guid("7415e445-013b-4f54-a228-63165a8f969b") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("be61d476-6fbb-4fa3-b67a-7ab6f957eef4"), Name = "A1", ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0") },
                        new { Id = new Guid("693d6695-03be-4a37-b026-dacf32416396"), Name = "A2", ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0") },
                        new { Id = new Guid("f12ba09b-0347-4443-8d32-54b7cbdfdc05"), Name = "A3", ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0") },
                        new { Id = new Guid("abe4ed19-e7ce-492d-bd80-02467e07282d"), Name = "A4", ServicePlaceId = new Guid("9a5fc6cd-57ba-4060-b33e-87311baf23b0") },
                        new { Id = new Guid("7c177b8b-9f6a-40bd-a3fa-1fa5e399278e"), Name = "A1", ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293") },
                        new { Id = new Guid("59686326-a43e-4fa7-9919-cde7ce95f2eb"), Name = "A2", ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293") },
                        new { Id = new Guid("13c26d08-5405-40e4-be0a-62dcf0fd0578"), Name = "A3", ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293") },
                        new { Id = new Guid("2cd89e64-1c2a-4901-a701-a2eb2e56c345"), Name = "A4", ServicePlaceId = new Guid("6c5eb7be-0f2f-4c11-98ae-797fabf73293") },
                        new { Id = new Guid("33a38cd7-17e1-44a4-af32-3e08724dd348"), Name = "A1", ServicePlaceId = new Guid("2553c85d-b95e-49b9-ac0f-a59e47c15d8d") },
                        new { Id = new Guid("47a6d737-6202-4850-a794-0f586c1e4cb8"), Name = "A2", ServicePlaceId = new Guid("2553c85d-b95e-49b9-ac0f-a59e47c15d8d") },
                        new { Id = new Guid("8f5f9683-a1b0-459e-8801-3862b98456f3"), Name = "A3", ServicePlaceId = new Guid("2553c85d-b95e-49b9-ac0f-a59e47c15d8d") },
                        new { Id = new Guid("a9c9cd87-b4f0-4d79-aeec-85811950a3b4"), Name = "A4", ServicePlaceId = new Guid("2553c85d-b95e-49b9-ac0f-a59e47c15d8d") },
                        new { Id = new Guid("9d687017-8d7c-4031-88f3-8dc5188cfa55"), Name = "A1", ServicePlaceId = new Guid("d0cf801c-ef14-44f8-809b-1741a9b755c0") },
                        new { Id = new Guid("6cffa015-1d0e-41a0-ae76-70bda94fe206"), Name = "A2", ServicePlaceId = new Guid("d0cf801c-ef14-44f8-809b-1741a9b755c0") },
                        new { Id = new Guid("50d14075-776e-4a36-933e-0deca9dbb987"), Name = "A3", ServicePlaceId = new Guid("d0cf801c-ef14-44f8-809b-1741a9b755c0") },
                        new { Id = new Guid("00473d15-affa-49c9-a1b0-de867cb04559"), Name = "A4", ServicePlaceId = new Guid("d0cf801c-ef14-44f8-809b-1741a9b755c0") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("840a697d-2411-4072-848c-f6d64075cd79"), ImageId = new Guid("f167931f-adec-4ff5-bc6e-e6cfd33d2092"), Name = "Mozik" },
                        new { Id = new Guid("01dd128f-40ab-4dc0-a544-55e97b327591"), ImageId = new Guid("f1b6dc09-1dfd-4070-a476-6488099eaa77"), Name = "Színházak" },
                        new { Id = new Guid("4fa6edec-e7d3-4c88-b990-0efd99c713b4"), ImageId = new Guid("bafe0567-48d4-4c78-b588-9a0ec69cc4ba"), Name = "Sport" },
                        new { Id = new Guid("5c0bc8c5-4e05-483c-97ac-f810d400b191"), ImageId = new Guid("efad6f97-5a70-42b4-9af2-998e0ad1e5ce"), Name = "Szabadidő" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "78714a36-4370-4751-9927-ffb771263a98", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAEOgX6O/AZ5Tn4F5yrQLHeQop5ttyCeER/ioh/uh5z7Ln33j2YBaV8fTvLAM3/5d6Yw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "59317E0A-8F55-46F9-BF5A-A81680A41964", ConcurrencyStamp = "3f86a552-eabe-4a59-b3e2-32b239bdabe1", Name = "Administrators", NormalizedName = "ADMINISTRATORS" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "59317E0A-8F55-46F9-BF5A-A81680A41964" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServiceId");

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServicePlaceId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Image", "LayoutImage")
                        .WithMany()
                        .HasForeignKey("LayoutImageId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ServicePlaces")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
