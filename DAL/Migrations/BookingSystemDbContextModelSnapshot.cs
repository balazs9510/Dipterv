// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    partial class BookingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<string>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("817e3e23-75bf-40c9-b9e1-aef15fb3374b"), Description = "", EventId = new Guid("a8bf7e26-8032-4f8d-81b3-1ff33687450e"), From = new DateTime(2019, 12, 5, 14, 40, 21, 925, DateTimeKind.Local), ServiceId = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb"), ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8"), To = new DateTime(2019, 12, 5, 16, 40, 21, 928, DateTimeKind.Local) },
                        new { Id = new Guid("392ba299-50b9-4828-815c-a0fce1269a19"), Description = "", EventId = new Guid("a8bf7e26-8032-4f8d-81b3-1ff33687450e"), From = new DateTime(2019, 12, 5, 16, 40, 21, 928, DateTimeKind.Local), ServiceId = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb"), ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8"), To = new DateTime(2019, 12, 5, 18, 40, 21, 928, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("a8bf7e26-8032-4f8d-81b3-1ff33687450e"), Description = "Thanos súlyos tette, amivel elpusztította az univerzum élőlényeinek felét és megtörte a Bosszúállókat, a megmaradt hősöket egy végső összecsapásra készteti a Marvel Studios huszonegy filmet megkoronázó, nagyszabású fináléjában, a Bosszúállók: Végjátékban.", ImageId = new Guid("6286f9eb-0227-4db6-9a06-08d261095e30"), Name = "Bosszúállók: Végjáték", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("6c6423ad-6127-4178-b834-b54bb12a67f6"), Description = "Mindannyiunkban ott bujkál a szuperhős – de van, akiből elő is jön. Billy Batson 14 éves, egy árvaházból kerül nevelőszüleihez, és nem a legnépszerűbb srác az iskolában…de Shazam, az ősöreg, különleges erejű varázsló mégis kiválasztja. Amikor a srác hangosan kimondja: a varázsló nevét, átalakul. Igazi szuperhős válik belőle, annak minden kellékével: testhezálló, köpönyeggel kiegészített ruha, különleges eszközök, rendkívüli erő és meghökkentő képességek.", ImageId = new Guid("8acfe208-054e-4f25-8ec8-45f94ae21311"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("bf6ba414-9aeb-4cf5-a8de-0cd3d6bcead1"), Description = "Avagy a játéknak soha nincs vége", ImageId = new Guid("5404aafd-2dd5-4cfc-8196-c7f9de792105"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("edaf3675-c590-4aa5-a581-7ec9815a5236"), Description = "FÖRCH MAGYAR KUPA", ImageId = new Guid("6595544a-cc08-4cf7-b746-e195d2ac636f"), Name = "FTC-Telekom : DVTK", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("ee3c856d-a602-47a5-b4b0-dfc3f8e90b90"), Description = "Egy óra.", ImageId = new Guid("fc24a599-e787-4f34-936e-51a3dd5de00d"), Name = "Pihentető masszás (1 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("928fbd5d-5a4c-47ab-98d9-c00e6c4a2e2b"), Description = "Másfél óra.", ImageId = new Guid("fc24a599-e787-4f34-936e-51a3dd5de00d"), Name = "Pihentető masszás (1,5 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("5f9c19a7-0975-4f74-b033-6f09694b56d2"), Description = "Két óra.", ImageId = new Guid("fc24a599-e787-4f34-936e-51a3dd5de00d"), Name = "Pihentető masszás (2 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("Extension");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = new Guid("34177eb6-e990-4cfa-8aa4-cd55a18f718e"), Extension = "png", Name = "cinema.png" },
                        new { Id = new Guid("f7b64fe4-cd58-4d4f-becb-cc10fa365cda"), Extension = "png", Name = "theater.png" },
                        new { Id = new Guid("8dea7035-43f2-4735-a309-a8bc566b0f80"), Extension = "png", Name = "sport.png" },
                        new { Id = new Guid("61b5792a-a836-46ef-98c9-4d0af8225b52"), Extension = "png", Name = "spa.png" },
                        new { Id = new Guid("49071411-213e-4822-9d5e-8a0354a762ce"), Extension = "png", Name = "alle.png" },
                        new { Id = new Guid("973b4b03-f971-4c1b-ba17-edc59f592b00"), Extension = "png", Name = "mom.png" },
                        new { Id = new Guid("c911afe3-352c-4bd1-89be-3ac23a26a9ea"), Extension = "png", Name = "groupama.png" },
                        new { Id = new Guid("383d3600-51b8-4b2e-9af6-d6432b95f92f"), Extension = "png", Name = "madach.png" },
                        new { Id = new Guid("623a2c4d-614d-4bdd-9263-989a68ace1ea"), Extension = "png", Name = "corvin_duma.png" },
                        new { Id = new Guid("a6980a82-440d-4d0c-a72d-6955ef8830b1"), Extension = "png", Name = "aquapark.png" },
                        new { Id = new Guid("6286f9eb-0227-4db6-9a06-08d261095e30"), Extension = "png", Name = "endgame.png" },
                        new { Id = new Guid("8acfe208-054e-4f25-8ec8-45f94ae21311"), Extension = "png", Name = "shazam.png" },
                        new { Id = new Guid("5404aafd-2dd5-4cfc-8196-c7f9de792105"), Extension = "png", Name = "negyszogletu.png" },
                        new { Id = new Guid("6595544a-cc08-4cf7-b746-e195d2ac636f"), Extension = "png", Name = "ftc.png" },
                        new { Id = new Guid("fc24a599-e787-4f34-936e-51a3dd5de00d"), Extension = "png", Name = "masszazs.png" },
                        new { Id = new Guid("e4033899-118d-4664-b2b3-3c1f019a3820"), Extension = "svg", Name = "t4.svg" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb"), City = "Budapest", Description = "A 13 termes Cinema City Allee 2009. óta várja vendégeit a legjobb premier filmekkel - egyik termében kizárólag eredeti nyelvű filmvetítésekkel - az év minden napján. Nyitvatartás: pénztárnyitás az első előadás előtt 30 perccel, pénztár zárás az utolsó előadás kezdete után 15 perccel.", ImageId = new Guid("49071411-213e-4822-9d5e-8a0354a762ce"), Name = "CinemaCity Alle", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("a74aa1d1-1037-4b68-930a-fa34d139461a") },
                        new { Id = new Guid("cae1e812-907c-479c-8ab5-2bed84d2869d"), City = "Budapest", Description = "A CINEMApink MOM Park a jelenleg elérhető legjobb képminőséggel, prémium hangrendszerrel, kényelmi extrákkal és a legújabb sikerfilmekkel várja!", ImageId = new Guid("973b4b03-f971-4c1b-ba17-edc59f592b00"), Name = "CINEMApink MOM Park", Street = "Alkotás u. 53", TypeId = new Guid("a74aa1d1-1037-4b68-930a-fa34d139461a") },
                        new { Id = new Guid("8c3b7421-23f1-4537-bc7d-605bfc964c2e"), City = "Budapest", Description = "„BEST OF BUDAPEST & HUNGARY 2017” DÍJAT NYERT A FRADI OTTHONA, A GROUPAMA ARÉNA!", ImageId = new Guid("c911afe3-352c-4bd1-89be-3ac23a26a9ea"), Name = "Groupama Aréna", Street = "Üllői út 129", TypeId = new Guid("07103174-dbdd-4b26-ab03-01f45ab25b19") },
                        new { Id = new Guid("942809d9-4a6d-4d4f-aed5-894916cf851f"), City = "Budapest", Description = "Madách Színház néven több színházi vállalkozás is létrejött századunkban Budapesten. 1919-ben a Zeneakadémia kistermében Madách Színház néven kísérletezett egy társulat, mely zömmel a frontról hazatért, szerződés nélküli színészekből alakult. Alig több mint egy évig működtek, új típusú programmal indultak, legnagyobb sikerük a százas szériát futó Holnap reggel című Karinthy Frigyes dráma előadása.", ImageId = new Guid("383d3600-51b8-4b2e-9af6-d6432b95f92f"), Name = "Madách Színház", Street = "Erzsébet krt. 29-33", TypeId = new Guid("de721af7-9653-41c2-8eeb-7bce758358d0") },
                        new { Id = new Guid("bf3f6cad-67a5-43b0-ae18-cb5d96acff7c"), City = "Budapest", Description = "Corvin Dumaszínház", ImageId = new Guid("623a2c4d-614d-4bdd-9263-989a68ace1ea"), Name = "Corvin Dumaszínház", Street = "Corvin sétány 1 1/b", TypeId = new Guid("de721af7-9653-41c2-8eeb-7bce758358d0") },
                        new { Id = new Guid("e6ef6fbf-652b-492f-b661-d64d28db3091"), City = "Budapest", Description = "Ha többre vágysz egy átlagos pihenésnél... nálunk egyszerre átélheted akár egy kényeztető wellness hétvége minden jótékony hatását vagy gyermekként élvezheted az Aquaworld élményekkel teli világát.", ImageId = new Guid("a6980a82-440d-4d0c-a72d-6955ef8830b1"), Name = "Aquaworld Resort Budapest", Street = "Íves út 16", TypeId = new Guid("e1d8259c-0ef8-4a7a-b97c-5aa277e51955") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvents");

                    b.HasData(
                        new { EventId = new Guid("a8bf7e26-8032-4f8d-81b3-1ff33687450e"), ServiceId = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb") },
                        new { EventId = new Guid("a8bf7e26-8032-4f8d-81b3-1ff33687450e"), ServiceId = new Guid("cae1e812-907c-479c-8ab5-2bed84d2869d") },
                        new { EventId = new Guid("6c6423ad-6127-4178-b834-b54bb12a67f6"), ServiceId = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb") },
                        new { EventId = new Guid("6c6423ad-6127-4178-b834-b54bb12a67f6"), ServiceId = new Guid("cae1e812-907c-479c-8ab5-2bed84d2869d") },
                        new { EventId = new Guid("bf6ba414-9aeb-4cf5-a8de-0cd3d6bcead1"), ServiceId = new Guid("942809d9-4a6d-4d4f-aed5-894916cf851f") },
                        new { EventId = new Guid("edaf3675-c590-4aa5-a581-7ec9815a5236"), ServiceId = new Guid("8c3b7421-23f1-4537-bc7d-605bfc964c2e") },
                        new { EventId = new Guid("ee3c856d-a602-47a5-b4b0-dfc3f8e90b90"), ServiceId = new Guid("e6ef6fbf-652b-492f-b661-d64d28db3091") },
                        new { EventId = new Guid("928fbd5d-5a4c-47ab-98d9-c00e6c4a2e2b"), ServiceId = new Guid("e6ef6fbf-652b-492f-b661-d64d28db3091") },
                        new { EventId = new Guid("5f9c19a7-0975-4f74-b033-6f09694b56d2"), ServiceId = new Guid("e6ef6fbf-652b-492f-b661-d64d28db3091") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LayoutImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LayoutImageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8"), LayoutImageId = new Guid("e4033899-118d-4664-b2b3-3c1f019a3820"), Name = "4 helyes terem(allee)", ServiceId = new Guid("509c677e-a9f1-49be-b778-0c2141b083eb") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("bee08999-8585-4561-8bfc-e5d050c64f32"), Name = "A1", ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8") },
                        new { Id = new Guid("f26730fc-986b-4255-8aaf-e97b0b147c4d"), Name = "A2", ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8") },
                        new { Id = new Guid("71022dc9-4e62-470b-97a9-98bd8d04657e"), Name = "A3", ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8") },
                        new { Id = new Guid("b6b432c0-810c-4289-9560-2caeb6476d07"), Name = "A4", ServicePlaceId = new Guid("6ded3dfc-82a5-4c21-8440-d47910ba11e8") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("a74aa1d1-1037-4b68-930a-fa34d139461a"), ImageId = new Guid("34177eb6-e990-4cfa-8aa4-cd55a18f718e"), Name = "Mozik" },
                        new { Id = new Guid("de721af7-9653-41c2-8eeb-7bce758358d0"), ImageId = new Guid("f7b64fe4-cd58-4d4f-becb-cc10fa365cda"), Name = "Színházak" },
                        new { Id = new Guid("07103174-dbdd-4b26-ab03-01f45ab25b19"), ImageId = new Guid("8dea7035-43f2-4735-a309-a8bc566b0f80"), Name = "Sport" },
                        new { Id = new Guid("e1d8259c-0ef8-4a7a-b97c-5aa277e51955"), ImageId = new Guid("61b5792a-a836-46ef-98c9-4d0af8225b52"), Name = "Szabadidő" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "e24300d1-3cfa-4b1d-86dc-ec7b0854741b", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAECdopTSe+FdnrMB5N8dGDBw+/R/e1xMcqMkXXJ02GU/5HikIaMlDFA3bPK3veDVjwA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "4366b4cd-06f4-4d81-aeb5-7cd2d1795743", AccessFailedCount = 0, ConcurrencyStamp = "69e2da06-e712-4d4c-aa41-b510949bd6b9", Email = "sysadmin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "sysadmin@admin.hu", NormalizedUserName = "sysadmin", PasswordHash = "AQAAAAEAACcQAAAAEAxy9Qxemjk637qfyYzIwnq2cFE1q4WmDCuTXmwtqUuV2epQii9Q2IWt0jZUJKDa4A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "sysadmin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "59317E0A-8F55-46F9-BF5A-A81680A41964", ConcurrencyStamp = "a17fe9fd-208a-4509-88ec-cf543683dd84", Name = "Administrator", NormalizedName = "ADMINISTRATOR" },
                        new { Id = "487bdd19-dc0a-4208-911c-6141988e6b51", ConcurrencyStamp = "fec61269-b058-4025-a9e2-2be6339f99d6", Name = "SystemAdmin", NormalizedName = "SYSTEMADMIN" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "59317E0A-8F55-46F9-BF5A-A81680A41964" },
                        new { UserId = "4366b4cd-06f4-4d81-aeb5-7cd2d1795743", RoleId = "487bdd19-dc0a-4208-911c-6141988e6b51" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServiceId");

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServicePlaceId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Image", "LayoutImage")
                        .WithMany()
                        .HasForeignKey("LayoutImageId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ServicePlaces")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
