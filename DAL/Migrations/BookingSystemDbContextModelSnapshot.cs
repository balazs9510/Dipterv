// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    partial class BookingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<string>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("947bce20-0d33-4603-8913-914e3085ff0b"), Description = "", EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), From = new DateTime(2019, 5, 14, 20, 6, 23, 761, DateTimeKind.Local), ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981"), ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55"), To = new DateTime(2019, 5, 14, 22, 6, 23, 765, DateTimeKind.Local) },
                        new { Id = new Guid("74a70a06-ba76-45fb-b690-4ee3269fc301"), Description = "", EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), From = new DateTime(2019, 5, 14, 22, 6, 23, 765, DateTimeKind.Local), ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981"), ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55"), To = new DateTime(2019, 5, 15, 0, 6, 23, 765, DateTimeKind.Local) },
                        new { Id = new Guid("f950005c-da88-4a5a-b049-6c72df637df3"), Description = "", EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), From = new DateTime(2019, 5, 14, 20, 6, 23, 761, DateTimeKind.Local), ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981"), ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566"), To = new DateTime(2019, 5, 14, 22, 6, 23, 765, DateTimeKind.Local) },
                        new { Id = new Guid("b0008e62-df01-469d-9800-ae6e0fabfeb3"), Description = "", EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), From = new DateTime(2019, 5, 14, 22, 6, 23, 765, DateTimeKind.Local), ServiceId = new Guid("e0b4e09c-27f8-4bd8-9911-756ef749f5ad"), ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566"), To = new DateTime(2019, 5, 15, 0, 6, 23, 765, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), Description = "Thanos súlyos tette, amivel elpusztította az univerzum élőlényeinek felét és megtörte a Bosszúállókat, a megmaradt hősöket egy végső összecsapásra készteti a Marvel Studios huszonegy filmet megkoronázó, nagyszabású fináléjában, a Bosszúállók: Végjátékban.", ImageId = new Guid("7625ad1e-0c3a-4a0d-b15f-867a0395473a"), Name = "Bosszúállók: Végjáték", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("5cfe8311-cb39-4e30-8787-a2e37774c4b9"), Description = "Mindannyiunkban ott bujkál a szuperhős – de van, akiből elő is jön. Billy Batson 14 éves, egy árvaházból kerül nevelőszüleihez, és nem a legnépszerűbb srác az iskolában…de Shazam, az ősöreg, különleges erejű varázsló mégis kiválasztja. Amikor a srác hangosan kimondja: a varázsló nevét, átalakul. Igazi szuperhős válik belőle, annak minden kellékével: testhezálló, köpönyeggel kiegészített ruha, különleges eszközök, rendkívüli erő és meghökkentő képességek.", ImageId = new Guid("03874a74-d7f8-4502-8ee5-2653b7ae7661"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("23c78cc0-e33e-4787-84b3-2a2ee319ec13"), Description = "Avagy a játéknak soha nincs vége", ImageId = new Guid("897f9b1f-a950-4129-af5b-4079a315c381"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("a0eb86cd-1c65-47dc-8178-22f4e46fd73c"), Description = "FÖRCH MAGYAR KUPA", ImageId = new Guid("f4b731b0-a8fe-48f9-ab46-d98c442dc496"), Name = "FTC-Telekom : DVTK", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("08c9a0b9-c86f-4454-acd3-51f03b3ee434"), Description = "Egy óra.", ImageId = new Guid("67e3d99f-ccc0-4be2-a327-a28e0f50ce56"), Name = "Pihentető masszás (1 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("b86063bf-2249-4800-82f6-c653a9ee4f90"), Description = "Másfél óra.", ImageId = new Guid("67e3d99f-ccc0-4be2-a327-a28e0f50ce56"), Name = "Pihentető masszás (1,5 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("2872da91-24ac-446c-940f-3a3de122d318"), Description = "Két óra.", ImageId = new Guid("67e3d99f-ccc0-4be2-a327-a28e0f50ce56"), Name = "Pihentető masszás (2 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("Extension");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = new Guid("03c964c8-cc59-4ec5-9cdf-f830faeb3ab1"), Extension = "png", Name = "cinema.png" },
                        new { Id = new Guid("aa634a39-46cc-4d76-b2ab-ded146b436cc"), Extension = "png", Name = "theater.png" },
                        new { Id = new Guid("38e8da3d-48b0-488f-a2b9-672be52268b9"), Extension = "png", Name = "sport.png" },
                        new { Id = new Guid("385f82c0-58cd-4686-a75c-2bd6de275bee"), Extension = "png", Name = "spa.png" },
                        new { Id = new Guid("297f8fa9-48cb-42b9-a5c1-91b98b458b36"), Extension = "png", Name = "alle.png" },
                        new { Id = new Guid("2b9214a6-b007-482d-8718-cc2b47a165fd"), Extension = "png", Name = "mom.png" },
                        new { Id = new Guid("7768477f-3e2d-4ee1-adc1-d5f1132ca612"), Extension = "png", Name = "groupama.png" },
                        new { Id = new Guid("727c2383-97e7-4fc1-a409-ccef46e1d795"), Extension = "png", Name = "madach.png" },
                        new { Id = new Guid("4b598c83-00d9-4925-bf0a-015a5fc2c546"), Extension = "png", Name = "corvin_duma.png" },
                        new { Id = new Guid("cb441dcd-d655-4ed8-be36-663a1432972e"), Extension = "png", Name = "aquapark.png" },
                        new { Id = new Guid("7625ad1e-0c3a-4a0d-b15f-867a0395473a"), Extension = "png", Name = "endgame.png" },
                        new { Id = new Guid("03874a74-d7f8-4502-8ee5-2653b7ae7661"), Extension = "png", Name = "shazam.png" },
                        new { Id = new Guid("897f9b1f-a950-4129-af5b-4079a315c381"), Extension = "png", Name = "negyszogletu.png" },
                        new { Id = new Guid("f4b731b0-a8fe-48f9-ab46-d98c442dc496"), Extension = "png", Name = "ftc.png" },
                        new { Id = new Guid("67e3d99f-ccc0-4be2-a327-a28e0f50ce56"), Extension = "png", Name = "masszazs.png" },
                        new { Id = new Guid("965f9442-bcb0-4c85-bfe7-86bab000a7d4"), Extension = "svg", Name = "t4.svg" },
                        new { Id = new Guid("e442453f-b7ca-408c-8f24-7b0ff5327e72"), Extension = "svg", Name = "t10.svg" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("41e9be60-6648-4d59-8d6f-b173def33981"), City = "Budapest", Description = "A 13 termes Cinema City Allee 2009. óta várja vendégeit a legjobb premier filmekkel - egyik termében kizárólag eredeti nyelvű filmvetítésekkel - az év minden napján. Nyitvatartás: pénztárnyitás az első előadás előtt 30 perccel, pénztár zárás az utolsó előadás kezdete után 15 perccel.", ImageId = new Guid("297f8fa9-48cb-42b9-a5c1-91b98b458b36"), Name = "CinemaCity Alle", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("279f65a3-39b2-4e7c-94f2-cb11420bba4c") },
                        new { Id = new Guid("e0b4e09c-27f8-4bd8-9911-756ef749f5ad"), City = "Budapest", Description = "A CINEMApink MOM Park a jelenleg elérhető legjobb képminőséggel, prémium hangrendszerrel, kényelmi extrákkal és a legújabb sikerfilmekkel várja!", ImageId = new Guid("2b9214a6-b007-482d-8718-cc2b47a165fd"), Name = "CINEMApink MOM Park", Street = "Alkotás u. 53", TypeId = new Guid("279f65a3-39b2-4e7c-94f2-cb11420bba4c") },
                        new { Id = new Guid("dc164a23-0aa3-4c82-b2eb-06b0b88b33ba"), City = "Budapest", Description = "„BEST OF BUDAPEST & HUNGARY 2017” DÍJAT NYERT A FRADI OTTHONA, A GROUPAMA ARÉNA!", ImageId = new Guid("7768477f-3e2d-4ee1-adc1-d5f1132ca612"), Name = "Groupama Aréna", Street = "Üllői út 129", TypeId = new Guid("048be27e-bfb2-4bef-a03d-02a891d16197") },
                        new { Id = new Guid("68cd14af-0138-44b1-99dd-85ea813e1679"), City = "Budapest", Description = "Madách Színház néven több színházi vállalkozás is létrejött századunkban Budapesten. 1919-ben a Zeneakadémia kistermében Madách Színház néven kísérletezett egy társulat, mely zömmel a frontról hazatért, szerződés nélküli színészekből alakult. Alig több mint egy évig működtek, új típusú programmal indultak, legnagyobb sikerük a százas szériát futó Holnap reggel című Karinthy Frigyes dráma előadása.", ImageId = new Guid("727c2383-97e7-4fc1-a409-ccef46e1d795"), Name = "Madách Színház", Street = "Erzsébet krt. 29-33", TypeId = new Guid("1fee0599-3ba1-48f1-b1aa-74b4a8a3acca") },
                        new { Id = new Guid("26aba2be-ccb6-43d7-a740-afae6609f082"), City = "Budapest", Description = "Corvin Dumaszínház", ImageId = new Guid("4b598c83-00d9-4925-bf0a-015a5fc2c546"), Name = "Corvin Dumaszínház", Street = "Corvin sétány 1 1/b", TypeId = new Guid("1fee0599-3ba1-48f1-b1aa-74b4a8a3acca") },
                        new { Id = new Guid("a8bfd4a5-befe-4e26-a683-33327067c8e7"), City = "Budapest", Description = "Ha többre vágysz egy átlagos pihenésnél... nálunk egyszerre átélheted akár egy kényeztető wellness hétvége minden jótékony hatását vagy gyermekként élvezheted az Aquaworld élményekkel teli világát.", ImageId = new Guid("cb441dcd-d655-4ed8-be36-663a1432972e"), Name = "Aquaworld Resort Budapest", Street = "Íves út 16", TypeId = new Guid("7656296e-dccd-4e6a-8dc9-ff9d46205de1") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvent");

                    b.HasData(
                        new { EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981") },
                        new { EventId = new Guid("0dbdbf3f-7517-4967-bfa4-b01d6d29bceb"), ServiceId = new Guid("e0b4e09c-27f8-4bd8-9911-756ef749f5ad") },
                        new { EventId = new Guid("5cfe8311-cb39-4e30-8787-a2e37774c4b9"), ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981") },
                        new { EventId = new Guid("5cfe8311-cb39-4e30-8787-a2e37774c4b9"), ServiceId = new Guid("e0b4e09c-27f8-4bd8-9911-756ef749f5ad") },
                        new { EventId = new Guid("23c78cc0-e33e-4787-84b3-2a2ee319ec13"), ServiceId = new Guid("68cd14af-0138-44b1-99dd-85ea813e1679") },
                        new { EventId = new Guid("a0eb86cd-1c65-47dc-8178-22f4e46fd73c"), ServiceId = new Guid("dc164a23-0aa3-4c82-b2eb-06b0b88b33ba") },
                        new { EventId = new Guid("08c9a0b9-c86f-4454-acd3-51f03b3ee434"), ServiceId = new Guid("a8bfd4a5-befe-4e26-a683-33327067c8e7") },
                        new { EventId = new Guid("b86063bf-2249-4800-82f6-c653a9ee4f90"), ServiceId = new Guid("a8bfd4a5-befe-4e26-a683-33327067c8e7") },
                        new { EventId = new Guid("2872da91-24ac-446c-940f-3a3de122d318"), ServiceId = new Guid("a8bfd4a5-befe-4e26-a683-33327067c8e7") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LayoutImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("LayoutImageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566"), LayoutImageId = new Guid("965f9442-bcb0-4c85-bfe7-86bab000a7d4"), Name = "4 helyes terem(mom)", ServiceId = new Guid("e0b4e09c-27f8-4bd8-9911-756ef749f5ad") },
                        new { Id = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55"), LayoutImageId = new Guid("965f9442-bcb0-4c85-bfe7-86bab000a7d4"), Name = "4 helyes terem(allee)", ServiceId = new Guid("41e9be60-6648-4d59-8d6f-b173def33981") },
                        new { Id = new Guid("c8ecb943-d195-453d-8025-46e19cffdaa5"), LayoutImageId = new Guid("965f9442-bcb0-4c85-bfe7-86bab000a7d4"), Name = "4 helyes terem (madách)", ServiceId = new Guid("68cd14af-0138-44b1-99dd-85ea813e1679") },
                        new { Id = new Guid("9cb1387c-c1ba-4905-9117-4fd925ae2608"), LayoutImageId = new Guid("965f9442-bcb0-4c85-bfe7-86bab000a7d4"), Name = "4 helyes terem (aquaworld)", ServiceId = new Guid("a8bfd4a5-befe-4e26-a683-33327067c8e7") },
                        new { Id = new Guid("47eb7711-2dea-4f0d-b4b2-2ac4861242fe"), LayoutImageId = new Guid("e442453f-b7ca-408c-8f24-7b0ff5327e72"), Name = "10 helyes terem (groupama)", ServiceId = new Guid("dc164a23-0aa3-4c82-b2eb-06b0b88b33ba") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("d84b368c-5b1b-4b42-b600-553309db8ba2"), Name = "A1", ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566") },
                        new { Id = new Guid("2e41f38e-d6ed-4bfa-a0c9-225f052384f8"), Name = "A2", ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566") },
                        new { Id = new Guid("49089f47-e42d-401e-9d6f-c4994778d231"), Name = "A3", ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566") },
                        new { Id = new Guid("dc6428c4-4dde-43ea-89cb-f0914ba9852a"), Name = "A4", ServicePlaceId = new Guid("22b5f743-76b3-4559-a67e-05440d0a7566") },
                        new { Id = new Guid("bee08999-8585-4561-8bfc-e5d050c64f32"), Name = "A1", ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55") },
                        new { Id = new Guid("f26730fc-986b-4255-8aaf-e97b0b147c4d"), Name = "A2", ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55") },
                        new { Id = new Guid("71022dc9-4e62-470b-97a9-98bd8d04657e"), Name = "A3", ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55") },
                        new { Id = new Guid("b6b432c0-810c-4289-9560-2caeb6476d07"), Name = "A4", ServicePlaceId = new Guid("b577a8be-b0b3-41a6-83d5-707c079c1f55") },
                        new { Id = new Guid("4237d65d-7a8b-4e3a-8e90-53255a828f8c"), Name = "A1", ServicePlaceId = new Guid("c8ecb943-d195-453d-8025-46e19cffdaa5") },
                        new { Id = new Guid("12c4e609-43d3-4957-9221-b47baafb4e5b"), Name = "A2", ServicePlaceId = new Guid("c8ecb943-d195-453d-8025-46e19cffdaa5") },
                        new { Id = new Guid("d7465d8a-3c2c-4f6d-9d37-6e47b78af3b9"), Name = "A3", ServicePlaceId = new Guid("c8ecb943-d195-453d-8025-46e19cffdaa5") },
                        new { Id = new Guid("7885ae73-58ff-47e1-ab3b-010db458987b"), Name = "A4", ServicePlaceId = new Guid("c8ecb943-d195-453d-8025-46e19cffdaa5") },
                        new { Id = new Guid("bb3a80c1-f7da-4729-a001-4a65d61de844"), Name = "A1", ServicePlaceId = new Guid("9cb1387c-c1ba-4905-9117-4fd925ae2608") },
                        new { Id = new Guid("bdf11c3f-bbec-4fe0-92e2-62e55d47d03c"), Name = "A2", ServicePlaceId = new Guid("9cb1387c-c1ba-4905-9117-4fd925ae2608") },
                        new { Id = new Guid("02fb5dc2-05c6-4625-afb3-273bd408fbb7"), Name = "A3", ServicePlaceId = new Guid("9cb1387c-c1ba-4905-9117-4fd925ae2608") },
                        new { Id = new Guid("8e76cf6a-3832-49f2-ba0c-a2b06cd614a4"), Name = "A4", ServicePlaceId = new Guid("9cb1387c-c1ba-4905-9117-4fd925ae2608") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("279f65a3-39b2-4e7c-94f2-cb11420bba4c"), ImageId = new Guid("03c964c8-cc59-4ec5-9cdf-f830faeb3ab1"), Name = "Mozik" },
                        new { Id = new Guid("1fee0599-3ba1-48f1-b1aa-74b4a8a3acca"), ImageId = new Guid("aa634a39-46cc-4d76-b2ab-ded146b436cc"), Name = "Színházak" },
                        new { Id = new Guid("048be27e-bfb2-4bef-a03d-02a891d16197"), ImageId = new Guid("38e8da3d-48b0-488f-a2b9-672be52268b9"), Name = "Sport" },
                        new { Id = new Guid("7656296e-dccd-4e6a-8dc9-ff9d46205de1"), ImageId = new Guid("385f82c0-58cd-4686-a75c-2bd6de275bee"), Name = "Szabadidő" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "c2c894d9-e835-4c09-b4ac-f8d18254a5c4", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAEHHO4fYEN4QG9yuKtpmp/r1+SjUpv9m8hwyQTeZaLYS+xusQaV8ULqowuyPtrnwMiw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "59317E0A-8F55-46F9-BF5A-A81680A41964", ConcurrencyStamp = "b5fe7c04-c43f-4ead-bf42-b9405e23c6c5", Name = "Administrators", NormalizedName = "ADMINISTRATORS" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "59317E0A-8F55-46F9-BF5A-A81680A41964" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServiceId");

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServicePlaceId");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Image", "LayoutImage")
                        .WithMany()
                        .HasForeignKey("LayoutImageId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
