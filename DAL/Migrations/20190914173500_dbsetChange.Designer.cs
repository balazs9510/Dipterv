// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    [Migration("20190914173500_dbsetChange")]
    partial class dbsetChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<string>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("eede4d1f-52c7-4c32-ba24-ec85540919a5"), Description = "", EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), From = new DateTime(2019, 9, 14, 19, 34, 59, 571, DateTimeKind.Local), ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d"), ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95"), To = new DateTime(2019, 9, 14, 21, 34, 59, 573, DateTimeKind.Local) },
                        new { Id = new Guid("e78ae7ca-3148-48c3-8b0b-7e94801ad10f"), Description = "", EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), From = new DateTime(2019, 9, 14, 21, 34, 59, 573, DateTimeKind.Local), ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d"), ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95"), To = new DateTime(2019, 9, 14, 23, 34, 59, 573, DateTimeKind.Local) },
                        new { Id = new Guid("c165bbde-92a8-4586-a66f-cccb614ae7be"), Description = "", EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), From = new DateTime(2019, 9, 14, 19, 34, 59, 571, DateTimeKind.Local), ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d"), ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317"), To = new DateTime(2019, 9, 14, 21, 34, 59, 573, DateTimeKind.Local) },
                        new { Id = new Guid("f28c5a4b-7a05-4049-bc81-a0a9f9a86c6e"), Description = "", EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), From = new DateTime(2019, 9, 14, 21, 34, 59, 573, DateTimeKind.Local), ServiceId = new Guid("41c4af48-5d35-415a-b128-9d63ea17f4b2"), ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317"), To = new DateTime(2019, 9, 14, 23, 34, 59, 573, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), Description = "Thanos súlyos tette, amivel elpusztította az univerzum élőlényeinek felét és megtörte a Bosszúállókat, a megmaradt hősöket egy végső összecsapásra készteti a Marvel Studios huszonegy filmet megkoronázó, nagyszabású fináléjában, a Bosszúállók: Végjátékban.", ImageId = new Guid("6ccb851e-b14e-4e28-b7e1-c3da3a8bbd21"), Name = "Bosszúállók: Végjáték", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("e9141e68-1390-49c8-8bc9-4455287c51b6"), Description = "Mindannyiunkban ott bujkál a szuperhős – de van, akiből elő is jön. Billy Batson 14 éves, egy árvaházból kerül nevelőszüleihez, és nem a legnépszerűbb srác az iskolában…de Shazam, az ősöreg, különleges erejű varázsló mégis kiválasztja. Amikor a srác hangosan kimondja: a varázsló nevét, átalakul. Igazi szuperhős válik belőle, annak minden kellékével: testhezálló, köpönyeggel kiegészített ruha, különleges eszközök, rendkívüli erő és meghökkentő képességek.", ImageId = new Guid("9585b911-9030-4918-8bc7-2856a2cc6772"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("b4d1535a-963c-4081-9ccd-90d440788dff"), Description = "Avagy a játéknak soha nincs vége", ImageId = new Guid("8dc3a817-b7b1-465c-a70c-1d8dcdf54c71"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("cef08499-c7de-4494-9fa6-1c0b00346f0c"), Description = "FÖRCH MAGYAR KUPA", ImageId = new Guid("dfb2a838-2e1b-47d5-9307-1c81c3a7943b"), Name = "FTC-Telekom : DVTK", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("93b3c0dd-f7ca-4715-8532-d3454e3d4a89"), Description = "Egy óra.", ImageId = new Guid("d3daee66-c582-41c2-84ee-2bf3eb5ee82a"), Name = "Pihentető masszás (1 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("fe6cc18b-1827-46d1-bd09-e046e4ff3126"), Description = "Másfél óra.", ImageId = new Guid("d3daee66-c582-41c2-84ee-2bf3eb5ee82a"), Name = "Pihentető masszás (1,5 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("eae9d35e-0af4-4da5-9404-44e5752fd7de"), Description = "Két óra.", ImageId = new Guid("d3daee66-c582-41c2-84ee-2bf3eb5ee82a"), Name = "Pihentető masszás (2 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("Extension");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = new Guid("d31992a4-d45d-4323-a28c-070f48a723ad"), Extension = "png", Name = "cinema.png" },
                        new { Id = new Guid("a6b21a35-cee6-49d3-98df-8c7d90e3c831"), Extension = "png", Name = "theater.png" },
                        new { Id = new Guid("68a267b3-3fc5-4b38-be1d-35b7cce673b1"), Extension = "png", Name = "sport.png" },
                        new { Id = new Guid("3e08dcae-fcc2-4d9e-b3ea-d4787dcc6263"), Extension = "png", Name = "spa.png" },
                        new { Id = new Guid("306eafd9-3431-4848-b78e-779c4277fc2a"), Extension = "png", Name = "alle.png" },
                        new { Id = new Guid("a7eed056-0461-4c88-a4c1-cbd4d28cb948"), Extension = "png", Name = "mom.png" },
                        new { Id = new Guid("69ede672-96b0-40c8-b1b2-480c8548e9a6"), Extension = "png", Name = "groupama.png" },
                        new { Id = new Guid("375ba3d7-2c9b-49c7-97a8-4d41ea25a092"), Extension = "png", Name = "madach.png" },
                        new { Id = new Guid("032b419c-358e-4168-9897-b6348ec1f3a9"), Extension = "png", Name = "corvin_duma.png" },
                        new { Id = new Guid("8619ffdb-30d3-46fb-8d4e-d3ea87706487"), Extension = "png", Name = "aquapark.png" },
                        new { Id = new Guid("6ccb851e-b14e-4e28-b7e1-c3da3a8bbd21"), Extension = "png", Name = "endgame.png" },
                        new { Id = new Guid("9585b911-9030-4918-8bc7-2856a2cc6772"), Extension = "png", Name = "shazam.png" },
                        new { Id = new Guid("8dc3a817-b7b1-465c-a70c-1d8dcdf54c71"), Extension = "png", Name = "negyszogletu.png" },
                        new { Id = new Guid("dfb2a838-2e1b-47d5-9307-1c81c3a7943b"), Extension = "png", Name = "ftc.png" },
                        new { Id = new Guid("d3daee66-c582-41c2-84ee-2bf3eb5ee82a"), Extension = "png", Name = "masszazs.png" },
                        new { Id = new Guid("1ddd52aa-8864-4f55-9e8a-6a014ef2a783"), Extension = "svg", Name = "t4.svg" },
                        new { Id = new Guid("c53b3366-4bb1-472c-8fda-439d44efb5a5"), Extension = "svg", Name = "t10.svg" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d"), City = "Budapest", Description = "A 13 termes Cinema City Allee 2009. óta várja vendégeit a legjobb premier filmekkel - egyik termében kizárólag eredeti nyelvű filmvetítésekkel - az év minden napján. Nyitvatartás: pénztárnyitás az első előadás előtt 30 perccel, pénztár zárás az utolsó előadás kezdete után 15 perccel.", ImageId = new Guid("306eafd9-3431-4848-b78e-779c4277fc2a"), Name = "CinemaCity Alle", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("9dfa33ee-2300-4f62-b7fe-2b3a100b5860") },
                        new { Id = new Guid("41c4af48-5d35-415a-b128-9d63ea17f4b2"), City = "Budapest", Description = "A CINEMApink MOM Park a jelenleg elérhető legjobb képminőséggel, prémium hangrendszerrel, kényelmi extrákkal és a legújabb sikerfilmekkel várja!", ImageId = new Guid("a7eed056-0461-4c88-a4c1-cbd4d28cb948"), Name = "CINEMApink MOM Park", Street = "Alkotás u. 53", TypeId = new Guid("9dfa33ee-2300-4f62-b7fe-2b3a100b5860") },
                        new { Id = new Guid("c5a49b18-62d7-47df-9731-7f5972e86e7a"), City = "Budapest", Description = "„BEST OF BUDAPEST & HUNGARY 2017” DÍJAT NYERT A FRADI OTTHONA, A GROUPAMA ARÉNA!", ImageId = new Guid("69ede672-96b0-40c8-b1b2-480c8548e9a6"), Name = "Groupama Aréna", Street = "Üllői út 129", TypeId = new Guid("f5f0fc60-8a8f-4c77-9179-68ab676ba9b8") },
                        new { Id = new Guid("073fbf1b-ad3d-4153-a0fd-512a8882fa31"), City = "Budapest", Description = "Madách Színház néven több színházi vállalkozás is létrejött századunkban Budapesten. 1919-ben a Zeneakadémia kistermében Madách Színház néven kísérletezett egy társulat, mely zömmel a frontról hazatért, szerződés nélküli színészekből alakult. Alig több mint egy évig működtek, új típusú programmal indultak, legnagyobb sikerük a százas szériát futó Holnap reggel című Karinthy Frigyes dráma előadása.", ImageId = new Guid("375ba3d7-2c9b-49c7-97a8-4d41ea25a092"), Name = "Madách Színház", Street = "Erzsébet krt. 29-33", TypeId = new Guid("d778ccea-6b01-48cb-be2d-52ae99ff74b7") },
                        new { Id = new Guid("9b37bca6-bcf3-45ad-8d1a-7fc6f5abde1d"), City = "Budapest", Description = "Corvin Dumaszínház", ImageId = new Guid("032b419c-358e-4168-9897-b6348ec1f3a9"), Name = "Corvin Dumaszínház", Street = "Corvin sétány 1 1/b", TypeId = new Guid("d778ccea-6b01-48cb-be2d-52ae99ff74b7") },
                        new { Id = new Guid("1da2bd88-daf5-440c-9e25-2b235086cfb5"), City = "Budapest", Description = "Ha többre vágysz egy átlagos pihenésnél... nálunk egyszerre átélheted akár egy kényeztető wellness hétvége minden jótékony hatását vagy gyermekként élvezheted az Aquaworld élményekkel teli világát.", ImageId = new Guid("8619ffdb-30d3-46fb-8d4e-d3ea87706487"), Name = "Aquaworld Resort Budapest", Street = "Íves út 16", TypeId = new Guid("8136592c-2752-42b8-8a28-20c83a5b4f0f") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvents");

                    b.HasData(
                        new { EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d") },
                        new { EventId = new Guid("22f9d41b-0b06-4f76-acc2-45fb36a96ac7"), ServiceId = new Guid("41c4af48-5d35-415a-b128-9d63ea17f4b2") },
                        new { EventId = new Guid("e9141e68-1390-49c8-8bc9-4455287c51b6"), ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d") },
                        new { EventId = new Guid("e9141e68-1390-49c8-8bc9-4455287c51b6"), ServiceId = new Guid("41c4af48-5d35-415a-b128-9d63ea17f4b2") },
                        new { EventId = new Guid("b4d1535a-963c-4081-9ccd-90d440788dff"), ServiceId = new Guid("073fbf1b-ad3d-4153-a0fd-512a8882fa31") },
                        new { EventId = new Guid("cef08499-c7de-4494-9fa6-1c0b00346f0c"), ServiceId = new Guid("c5a49b18-62d7-47df-9731-7f5972e86e7a") },
                        new { EventId = new Guid("93b3c0dd-f7ca-4715-8532-d3454e3d4a89"), ServiceId = new Guid("1da2bd88-daf5-440c-9e25-2b235086cfb5") },
                        new { EventId = new Guid("fe6cc18b-1827-46d1-bd09-e046e4ff3126"), ServiceId = new Guid("1da2bd88-daf5-440c-9e25-2b235086cfb5") },
                        new { EventId = new Guid("eae9d35e-0af4-4da5-9404-44e5752fd7de"), ServiceId = new Guid("1da2bd88-daf5-440c-9e25-2b235086cfb5") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LayoutImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LayoutImageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317"), LayoutImageId = new Guid("1ddd52aa-8864-4f55-9e8a-6a014ef2a783"), Name = "4 helyes terem(mom)", ServiceId = new Guid("41c4af48-5d35-415a-b128-9d63ea17f4b2") },
                        new { Id = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95"), LayoutImageId = new Guid("1ddd52aa-8864-4f55-9e8a-6a014ef2a783"), Name = "4 helyes terem(allee)", ServiceId = new Guid("bdc8b70b-ed6d-4ead-8f8b-121dda44301d") },
                        new { Id = new Guid("106a5e0b-8837-4897-a106-a946ccff3f48"), LayoutImageId = new Guid("1ddd52aa-8864-4f55-9e8a-6a014ef2a783"), Name = "4 helyes terem (madách)", ServiceId = new Guid("073fbf1b-ad3d-4153-a0fd-512a8882fa31") },
                        new { Id = new Guid("27fcccd2-f32e-40ed-9aaa-c2803f22d197"), LayoutImageId = new Guid("1ddd52aa-8864-4f55-9e8a-6a014ef2a783"), Name = "4 helyes terem (aquaworld)", ServiceId = new Guid("1da2bd88-daf5-440c-9e25-2b235086cfb5") },
                        new { Id = new Guid("30f7c1b5-b9b6-4aeb-8072-fd3fb4ff892e"), LayoutImageId = new Guid("c53b3366-4bb1-472c-8fda-439d44efb5a5"), Name = "10 helyes terem (groupama)", ServiceId = new Guid("c5a49b18-62d7-47df-9731-7f5972e86e7a") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("9363b3e0-d037-4d72-936c-7f8f6477c05c"), Name = "A1", ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317") },
                        new { Id = new Guid("3bef16cc-2a1e-45e8-a3b7-49a442c08b04"), Name = "A2", ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317") },
                        new { Id = new Guid("5ec247f7-a8b3-42ec-b277-28ab8bb70728"), Name = "A3", ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317") },
                        new { Id = new Guid("05f0c058-f880-4620-8cc2-66e050806fa9"), Name = "A4", ServicePlaceId = new Guid("57d7c2ae-23af-4a28-8672-76f0c73de317") },
                        new { Id = new Guid("c74e18e9-111c-4105-a1db-cc30e44b4fb5"), Name = "A1", ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95") },
                        new { Id = new Guid("a110991f-eb16-48f3-91f2-6ae0beb8d840"), Name = "A2", ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95") },
                        new { Id = new Guid("a36dd087-acec-4a45-959d-cb76a5dc9bab"), Name = "A3", ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95") },
                        new { Id = new Guid("d03c39e0-789a-41c1-9110-ddd96d9add8c"), Name = "A4", ServicePlaceId = new Guid("3a9e2b40-457d-4978-bb71-20fd5904dc95") },
                        new { Id = new Guid("441df5f4-3275-4bf1-99c6-43cce5e66019"), Name = "A1", ServicePlaceId = new Guid("106a5e0b-8837-4897-a106-a946ccff3f48") },
                        new { Id = new Guid("9c2dea15-647b-4840-bfcf-47cf26dbc907"), Name = "A2", ServicePlaceId = new Guid("106a5e0b-8837-4897-a106-a946ccff3f48") },
                        new { Id = new Guid("559a81fb-2aba-4793-9f5f-cfa9ffec1303"), Name = "A3", ServicePlaceId = new Guid("106a5e0b-8837-4897-a106-a946ccff3f48") },
                        new { Id = new Guid("02d51612-25d5-4a21-a760-eeacc0057483"), Name = "A4", ServicePlaceId = new Guid("106a5e0b-8837-4897-a106-a946ccff3f48") },
                        new { Id = new Guid("303e430c-deee-4eac-936a-f3c7921a0ed3"), Name = "A1", ServicePlaceId = new Guid("27fcccd2-f32e-40ed-9aaa-c2803f22d197") },
                        new { Id = new Guid("e37adfc7-cf54-4fd0-af7b-e84bf82805ea"), Name = "A2", ServicePlaceId = new Guid("27fcccd2-f32e-40ed-9aaa-c2803f22d197") },
                        new { Id = new Guid("2ab46f29-fa8a-4627-88dc-1e2b6efd7bac"), Name = "A3", ServicePlaceId = new Guid("27fcccd2-f32e-40ed-9aaa-c2803f22d197") },
                        new { Id = new Guid("77dcc314-7fc6-4bb9-9af1-617204e938a4"), Name = "A4", ServicePlaceId = new Guid("27fcccd2-f32e-40ed-9aaa-c2803f22d197") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("9dfa33ee-2300-4f62-b7fe-2b3a100b5860"), ImageId = new Guid("d31992a4-d45d-4323-a28c-070f48a723ad"), Name = "Mozik" },
                        new { Id = new Guid("d778ccea-6b01-48cb-be2d-52ae99ff74b7"), ImageId = new Guid("a6b21a35-cee6-49d3-98df-8c7d90e3c831"), Name = "Színházak" },
                        new { Id = new Guid("f5f0fc60-8a8f-4c77-9179-68ab676ba9b8"), ImageId = new Guid("68a267b3-3fc5-4b38-be1d-35b7cce673b1"), Name = "Sport" },
                        new { Id = new Guid("8136592c-2752-42b8-8a28-20c83a5b4f0f"), ImageId = new Guid("3e08dcae-fcc2-4d9e-b3ea-d4787dcc6263"), Name = "Szabadidő" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "59627fb5-ec6e-4909-a951-1dbc267def76", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAEGhJp9AX7viRUHhLgo5L0VkxkEWjvJxYigCUvZ3/1pH8SFd3iTsYTp034a+d18gRiA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "59317E0A-8F55-46F9-BF5A-A81680A41964", ConcurrencyStamp = "16bdf2cd-79d2-438c-a6aa-4e0d26262b6f", Name = "Administrators", NormalizedName = "ADMINISTRATORS" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "59317E0A-8F55-46F9-BF5A-A81680A41964" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServiceId");

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServicePlaceId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Image", "LayoutImage")
                        .WithMany()
                        .HasForeignKey("LayoutImageId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ServicePlaces")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
