// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    [Migration("20190718085417_userIdToEntities")]
    partial class userIdToEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.Property<string>("BookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("BookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("BookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("ServicePlaceId");

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("EvenSchedules");

                    b.HasData(
                        new { Id = new Guid("e74799ea-65d3-4435-a17c-3a3a35414787"), Description = "", EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), From = new DateTime(2019, 7, 18, 10, 54, 15, 501, DateTimeKind.Local), ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d"), ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85"), To = new DateTime(2019, 7, 18, 12, 54, 15, 502, DateTimeKind.Local) },
                        new { Id = new Guid("4f1afef9-2249-410a-9b5d-fcb589cccc2b"), Description = "", EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), From = new DateTime(2019, 7, 18, 12, 54, 15, 502, DateTimeKind.Local), ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d"), ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85"), To = new DateTime(2019, 7, 18, 14, 54, 15, 502, DateTimeKind.Local) },
                        new { Id = new Guid("e14587c4-25eb-4dfd-a7f3-2579f3cd0293"), Description = "", EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), From = new DateTime(2019, 7, 18, 10, 54, 15, 501, DateTimeKind.Local), ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d"), ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae"), To = new DateTime(2019, 7, 18, 12, 54, 15, 502, DateTimeKind.Local) },
                        new { Id = new Guid("1342018d-0ad2-4918-9e01-3f5e02995504"), Description = "", EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), From = new DateTime(2019, 7, 18, 12, 54, 15, 502, DateTimeKind.Local), ServiceId = new Guid("43f74c5e-1222-4f88-9485-310c4640c3df"), ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae"), To = new DateTime(2019, 7, 18, 14, 54, 15, 502, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), Description = "Thanos súlyos tette, amivel elpusztította az univerzum élőlényeinek felét és megtörte a Bosszúállókat, a megmaradt hősöket egy végső összecsapásra készteti a Marvel Studios huszonegy filmet megkoronázó, nagyszabású fináléjában, a Bosszúállók: Végjátékban.", ImageId = new Guid("0ab0163a-d66b-49a7-b3e5-aedbe6ac475c"), Name = "Bosszúállók: Végjáték", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("9a7f8b97-7929-4291-97bf-e867651e679d"), Description = "Mindannyiunkban ott bujkál a szuperhős – de van, akiből elő is jön. Billy Batson 14 éves, egy árvaházból kerül nevelőszüleihez, és nem a legnépszerűbb srác az iskolában…de Shazam, az ősöreg, különleges erejű varázsló mégis kiválasztja. Amikor a srác hangosan kimondja: a varázsló nevét, átalakul. Igazi szuperhős válik belőle, annak minden kellékével: testhezálló, köpönyeggel kiegészített ruha, különleges eszközök, rendkívüli erő és meghökkentő képességek.", ImageId = new Guid("481b5fce-fc4c-4bec-a076-3a1cae11e560"), Name = "Shazam!", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("31fa3699-44fd-4fa4-8a20-7f3d14a354d6"), Description = "Avagy a játéknak soha nincs vége", ImageId = new Guid("4ecf735a-95c7-4a63-a9d9-4b98f8fe591b"), Name = "Négyszögletű Kerek Erdő", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("8d5a9a83-3003-4afe-be5b-e57f6542703f"), Description = "FÖRCH MAGYAR KUPA", ImageId = new Guid("e2206d09-4313-43d7-be77-c08a14165e98"), Name = "FTC-Telekom : DVTK", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("e0f539c1-edef-48a8-a495-13f6d35393e2"), Description = "Egy óra.", ImageId = new Guid("960801d7-36d2-46b3-81d4-468ab05a1ec3"), Name = "Pihentető masszás (1 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("d2e35109-8473-42f8-ab4e-f5b622e47530"), Description = "Másfél óra.", ImageId = new Guid("960801d7-36d2-46b3-81d4-468ab05a1ec3"), Name = "Pihentető masszás (1,5 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" },
                        new { Id = new Guid("93a6b227-fea5-457c-87cd-db021191ba0a"), Description = "Két óra.", ImageId = new Guid("960801d7-36d2-46b3-81d4-468ab05a1ec3"), Name = "Pihentető masszás (2 óra)", UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("Extension");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new { Id = new Guid("b5af72ea-7c6e-4a9a-8683-38a15e325053"), Extension = "png", Name = "cinema.png" },
                        new { Id = new Guid("4f237a06-9297-4b86-9ad2-cefd4ee95b35"), Extension = "png", Name = "theater.png" },
                        new { Id = new Guid("6e9c798a-d077-4e6a-9c9d-c7a8e0cca1e8"), Extension = "png", Name = "sport.png" },
                        new { Id = new Guid("dd83df06-e039-4f04-95b8-28a26b6fba1a"), Extension = "png", Name = "spa.png" },
                        new { Id = new Guid("7af3ed91-4d35-4fdf-a9a8-62156902b1ff"), Extension = "png", Name = "alle.png" },
                        new { Id = new Guid("a35a82b0-4751-48b0-9dae-d8fc6e01c805"), Extension = "png", Name = "mom.png" },
                        new { Id = new Guid("8a7e43e0-8e58-4e34-b4f5-2023eb8b1b96"), Extension = "png", Name = "groupama.png" },
                        new { Id = new Guid("2b8c9710-e47f-45e1-883b-9e2cd513e978"), Extension = "png", Name = "madach.png" },
                        new { Id = new Guid("eda5ec13-f96d-4560-8456-02a5c844c63c"), Extension = "png", Name = "corvin_duma.png" },
                        new { Id = new Guid("5f32dad5-3a06-47af-9d38-c528a6967fff"), Extension = "png", Name = "aquapark.png" },
                        new { Id = new Guid("0ab0163a-d66b-49a7-b3e5-aedbe6ac475c"), Extension = "png", Name = "endgame.png" },
                        new { Id = new Guid("481b5fce-fc4c-4bec-a076-3a1cae11e560"), Extension = "png", Name = "shazam.png" },
                        new { Id = new Guid("4ecf735a-95c7-4a63-a9d9-4b98f8fe591b"), Extension = "png", Name = "negyszogletu.png" },
                        new { Id = new Guid("e2206d09-4313-43d7-be77-c08a14165e98"), Extension = "png", Name = "ftc.png" },
                        new { Id = new Guid("960801d7-36d2-46b3-81d4-468ab05a1ec3"), Extension = "png", Name = "masszazs.png" },
                        new { Id = new Guid("b6d155e9-06c4-40a2-bf9d-e96b2cab3f1e"), Extension = "svg", Name = "t4.svg" },
                        new { Id = new Guid("9d005116-dcbe-4f86-99be-a8e1691aa49c"), Extension = "svg", Name = "t10.svg" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EvenScheduleId");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("Id");

                    b.HasIndex("EvenScheduleId");

                    b.ToTable("PendingBookings");
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.Property<Guid>("PendingBookingId");

                    b.Property<Guid>("ServicePlacePositionId");

                    b.HasKey("PendingBookingId", "ServicePlacePositionId");

                    b.HasIndex("ServicePlacePositionId");

                    b.ToTable("PendingBookingPositions");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<Guid>("TypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d"), City = "Budapest", Description = "A 13 termes Cinema City Allee 2009. óta várja vendégeit a legjobb premier filmekkel - egyik termében kizárólag eredeti nyelvű filmvetítésekkel - az év minden napján. Nyitvatartás: pénztárnyitás az első előadás előtt 30 perccel, pénztár zárás az utolsó előadás kezdete után 15 perccel.", ImageId = new Guid("7af3ed91-4d35-4fdf-a9a8-62156902b1ff"), Name = "CinemaCity Alle", Street = "Október huszonharmadika u. 8-10", TypeId = new Guid("1378b134-ab32-4504-9b37-8dc8cffb41d6") },
                        new { Id = new Guid("43f74c5e-1222-4f88-9485-310c4640c3df"), City = "Budapest", Description = "A CINEMApink MOM Park a jelenleg elérhető legjobb képminőséggel, prémium hangrendszerrel, kényelmi extrákkal és a legújabb sikerfilmekkel várja!", ImageId = new Guid("a35a82b0-4751-48b0-9dae-d8fc6e01c805"), Name = "CINEMApink MOM Park", Street = "Alkotás u. 53", TypeId = new Guid("1378b134-ab32-4504-9b37-8dc8cffb41d6") },
                        new { Id = new Guid("6dc36bc3-5c54-46b3-9fca-edd8ef35f026"), City = "Budapest", Description = "„BEST OF BUDAPEST & HUNGARY 2017” DÍJAT NYERT A FRADI OTTHONA, A GROUPAMA ARÉNA!", ImageId = new Guid("8a7e43e0-8e58-4e34-b4f5-2023eb8b1b96"), Name = "Groupama Aréna", Street = "Üllői út 129", TypeId = new Guid("06226189-5384-429a-92da-cb3767e2e4de") },
                        new { Id = new Guid("70e9e8e5-7833-4f7a-a425-f9a447739e95"), City = "Budapest", Description = "Madách Színház néven több színházi vállalkozás is létrejött századunkban Budapesten. 1919-ben a Zeneakadémia kistermében Madách Színház néven kísérletezett egy társulat, mely zömmel a frontról hazatért, szerződés nélküli színészekből alakult. Alig több mint egy évig működtek, új típusú programmal indultak, legnagyobb sikerük a százas szériát futó Holnap reggel című Karinthy Frigyes dráma előadása.", ImageId = new Guid("2b8c9710-e47f-45e1-883b-9e2cd513e978"), Name = "Madách Színház", Street = "Erzsébet krt. 29-33", TypeId = new Guid("21f19257-8d37-4097-bef7-d4a9300f766a") },
                        new { Id = new Guid("52853a99-bfec-4565-a57b-69118112f184"), City = "Budapest", Description = "Corvin Dumaszínház", ImageId = new Guid("eda5ec13-f96d-4560-8456-02a5c844c63c"), Name = "Corvin Dumaszínház", Street = "Corvin sétány 1 1/b", TypeId = new Guid("21f19257-8d37-4097-bef7-d4a9300f766a") },
                        new { Id = new Guid("d29d1e7b-fe82-48cc-8a48-377877c190a3"), City = "Budapest", Description = "Ha többre vágysz egy átlagos pihenésnél... nálunk egyszerre átélheted akár egy kényeztető wellness hétvége minden jótékony hatását vagy gyermekként élvezheted az Aquaworld élményekkel teli világát.", ImageId = new Guid("5f32dad5-3a06-47af-9d38-c528a6967fff"), Name = "Aquaworld Resort Budapest", Street = "Íves út 16", TypeId = new Guid("4ef109a3-fff0-4e2c-9fea-0515d3ee9a1e") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.Property<Guid>("EventId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("EventId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEvent");

                    b.HasData(
                        new { EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d") },
                        new { EventId = new Guid("dba73196-153f-4263-9f6f-a06265549fb6"), ServiceId = new Guid("43f74c5e-1222-4f88-9485-310c4640c3df") },
                        new { EventId = new Guid("9a7f8b97-7929-4291-97bf-e867651e679d"), ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d") },
                        new { EventId = new Guid("9a7f8b97-7929-4291-97bf-e867651e679d"), ServiceId = new Guid("43f74c5e-1222-4f88-9485-310c4640c3df") },
                        new { EventId = new Guid("31fa3699-44fd-4fa4-8a20-7f3d14a354d6"), ServiceId = new Guid("70e9e8e5-7833-4f7a-a425-f9a447739e95") },
                        new { EventId = new Guid("8d5a9a83-3003-4afe-be5b-e57f6542703f"), ServiceId = new Guid("6dc36bc3-5c54-46b3-9fca-edd8ef35f026") },
                        new { EventId = new Guid("e0f539c1-edef-48a8-a495-13f6d35393e2"), ServiceId = new Guid("d29d1e7b-fe82-48cc-8a48-377877c190a3") },
                        new { EventId = new Guid("d2e35109-8473-42f8-ab4e-f5b622e47530"), ServiceId = new Guid("d29d1e7b-fe82-48cc-8a48-377877c190a3") },
                        new { EventId = new Guid("93a6b227-fea5-457c-87cd-db021191ba0a"), ServiceId = new Guid("d29d1e7b-fe82-48cc-8a48-377877c190a3") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LayoutImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LayoutImageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServicePlaces");

                    b.HasData(
                        new { Id = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae"), LayoutImageId = new Guid("b6d155e9-06c4-40a2-bf9d-e96b2cab3f1e"), Name = "4 helyes terem(mom)", ServiceId = new Guid("43f74c5e-1222-4f88-9485-310c4640c3df") },
                        new { Id = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85"), LayoutImageId = new Guid("b6d155e9-06c4-40a2-bf9d-e96b2cab3f1e"), Name = "4 helyes terem(allee)", ServiceId = new Guid("8b49bcff-e923-4916-a2bb-ded947e90c7d") },
                        new { Id = new Guid("e90b07e6-2070-4951-9bdd-a5ff0329d6e7"), LayoutImageId = new Guid("b6d155e9-06c4-40a2-bf9d-e96b2cab3f1e"), Name = "4 helyes terem (madách)", ServiceId = new Guid("70e9e8e5-7833-4f7a-a425-f9a447739e95") },
                        new { Id = new Guid("47d50669-c543-43f5-8b98-9ed166008a97"), LayoutImageId = new Guid("b6d155e9-06c4-40a2-bf9d-e96b2cab3f1e"), Name = "4 helyes terem (aquaworld)", ServiceId = new Guid("d29d1e7b-fe82-48cc-8a48-377877c190a3") },
                        new { Id = new Guid("021a5f78-236b-4027-8205-6bf75227860e"), LayoutImageId = new Guid("9d005116-dcbe-4f86-99be-a8e1691aa49c"), Name = "10 helyes terem (groupama)", ServiceId = new Guid("6dc36bc3-5c54-46b3-9fca-edd8ef35f026") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("ServicePlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlaceId");

                    b.ToTable("ServicePlacePositions");

                    b.HasData(
                        new { Id = new Guid("9e05234f-7dc0-439d-a4c1-1c66454e8ef3"), Name = "A1", ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae") },
                        new { Id = new Guid("73b6ff7b-786c-4b4e-bf9c-62f269ba3b68"), Name = "A2", ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae") },
                        new { Id = new Guid("ca05da2f-1335-454a-8bce-190fd9fc6140"), Name = "A3", ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae") },
                        new { Id = new Guid("001d2195-11d4-4763-82c0-3d9d39c6a42a"), Name = "A4", ServicePlaceId = new Guid("41dbdc37-5e66-4873-826a-ad15a3f390ae") },
                        new { Id = new Guid("e36fd015-db66-40bc-b04f-45aa0d8f6adb"), Name = "A1", ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85") },
                        new { Id = new Guid("c925e77f-406b-463f-9cc3-c1d8001bfedd"), Name = "A2", ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85") },
                        new { Id = new Guid("893be820-c059-4a6d-a3e0-2dda1b4519a5"), Name = "A3", ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85") },
                        new { Id = new Guid("ca9ebea0-fe77-4c23-9662-938e6ca98607"), Name = "A4", ServicePlaceId = new Guid("8e57f3c9-c3ff-479c-8062-039877ec4f85") },
                        new { Id = new Guid("a6f5a649-fb99-4982-bae3-04a53099d340"), Name = "A1", ServicePlaceId = new Guid("e90b07e6-2070-4951-9bdd-a5ff0329d6e7") },
                        new { Id = new Guid("5a64fb30-9202-4414-90c5-d9fb65c1c528"), Name = "A2", ServicePlaceId = new Guid("e90b07e6-2070-4951-9bdd-a5ff0329d6e7") },
                        new { Id = new Guid("a66ecbd1-f1b5-4592-bc2e-ce0e7cc74010"), Name = "A3", ServicePlaceId = new Guid("e90b07e6-2070-4951-9bdd-a5ff0329d6e7") },
                        new { Id = new Guid("4b000cb6-321f-42ea-adba-05bf8172eb0b"), Name = "A4", ServicePlaceId = new Guid("e90b07e6-2070-4951-9bdd-a5ff0329d6e7") },
                        new { Id = new Guid("698bcd88-7b95-4995-a7a8-064daa516663"), Name = "A1", ServicePlaceId = new Guid("47d50669-c543-43f5-8b98-9ed166008a97") },
                        new { Id = new Guid("83b605db-0107-430f-8d74-0ab86c4e67cd"), Name = "A2", ServicePlaceId = new Guid("47d50669-c543-43f5-8b98-9ed166008a97") },
                        new { Id = new Guid("5f26f7dd-42f5-40d2-924a-370c2239df51"), Name = "A3", ServicePlaceId = new Guid("47d50669-c543-43f5-8b98-9ed166008a97") },
                        new { Id = new Guid("222fd582-75bd-4761-bcd4-ae297d7eabaa"), Name = "A4", ServicePlaceId = new Guid("47d50669-c543-43f5-8b98-9ed166008a97") }
                    );
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new { Id = new Guid("1378b134-ab32-4504-9b37-8dc8cffb41d6"), ImageId = new Guid("b5af72ea-7c6e-4a9a-8683-38a15e325053"), Name = "Mozik" },
                        new { Id = new Guid("21f19257-8d37-4097-bef7-d4a9300f766a"), ImageId = new Guid("4f237a06-9297-4b86-9ad2-cefd4ee95b35"), Name = "Színházak" },
                        new { Id = new Guid("06226189-5384-429a-92da-cb3767e2e4de"), ImageId = new Guid("6e9c798a-d077-4e6a-9c9d-c7a8e0cca1e8"), Name = "Sport" },
                        new { Id = new Guid("4ef109a3-fff0-4e2c-9fea-0515d3ee9a1e"), ImageId = new Guid("dd83df06-e039-4f04-95b8-28a26b6fba1a"), Name = "Szabadidő" }
                    );
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575", AccessFailedCount = 0, ConcurrencyStamp = "4a5269bf-8059-4236-a361-8089a561d50f", Email = "admin@admin.hu", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin@admin.hu", NormalizedUserName = "admin", PasswordHash = "AQAAAAEAACcQAAAAEJ+3qfxb19IAfUXxkwlzmw8eOW7wOXU5UUUEXNirvKNBOMMDZRjfMW3yT/DPoFMWyw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "59317E0A-8F55-46F9-BF5A-A81680A41964", ConcurrencyStamp = "bc9ab5e8-52de-49f3-9c3f-d8e20dd3beec", Name = "Administrators", NormalizedName = "ADMINISTRATORS" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575", RoleId = "59317E0A-8F55-46F9-BF5A-A81680A41964" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.BookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("BookingPositions")
                        .HasForeignKey("BookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("BookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.EvenSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServiceId");

                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("ServicePlaceId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("EvenSchedules")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Event")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBooking", b =>
                {
                    b.HasOne("DAL.Entities.EvenSchedule", "Schedule")
                        .WithMany("PendingBookings")
                        .HasForeignKey("EvenScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.PendingBookingPosition", b =>
                {
                    b.HasOne("DAL.Entities.PendingBooking", "PendingBooking")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("PendingBookingId");

                    b.HasOne("DAL.Entities.ServicePlacePosition", "ServicePlacePosition")
                        .WithMany("PendingBookingPositions")
                        .HasForeignKey("ServicePlacePositionId");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DAL.Entities.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServiceEvent", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlace", b =>
                {
                    b.HasOne("DAL.Entities.Image", "LayoutImage")
                        .WithMany()
                        .HasForeignKey("LayoutImageId");

                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Places")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ServicePlaces")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.ServicePlacePosition", b =>
                {
                    b.HasOne("DAL.Entities.ServicePlace", "ServicePlace")
                        .WithMany("Layout")
                        .HasForeignKey("ServicePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.ServiceType", b =>
                {
                    b.HasOne("DAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
